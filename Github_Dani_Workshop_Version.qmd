---
title: "Reproducible Science with git and GitHub"
subtitle: "Prepared for the Spring 2024 Ecology Center Coding Workshop Series"
author:
  - Dani Berger ([@Bergerdjb](https://github.com/Bergerdjb/))
format: 
  html:
    toc: true
    self-contained: true
    template-partials:
      - title-block.html
editor: visual
---

# Overview

One skill that will be important to you as a scientist is the ability to collaborate on research projects with others. As you've probably discovered since starting graduate school, these projects often involve a good deal of coding. A key tool to facilitate such collaborations is [version control software](https://en.wikipedia.org/wiki/Version_control), which helps anyone working on text-based files (like code and research manuscripts) to easily track changes and maintain versions of these files. If you are familiar with using Google Docs to manage group projects, version control software serves a similar purpose - allowing multiple collaborators to contribute to a single group product while ensuring individual contributions do not conflict with one another.

Even if you are not at a point in your own research where you need to share code with others, using version control software is still a valuable practice because it removes the temptation to create multiple versions of R Scripts every time you want to make small changes that might break your code. I know I am not the only person that makes folders for individual R Scripts because I will have twenty different variants with names like "Version1" and "Version2" before I'm satisfied with how the code runs. In our workshop today, we will use [git](https://en.wikipedia.org/wiki/Git) and [GitHub](https://en.wikipedia.org/wiki/GitHub) to manage multiple versions of the same file, both individually and collaboratively.

**Version control software can have a steep learning curve, so please don't feel like you will never be a proficient git user is you struggle with any of the workshop activities. Please have patience for yourself as you are pushing the boundaries of your knowledge to learn a new skill.**

Git and GitHub documentation and guides are full of jargon that may take some time to pick up. As you work to become more familiar with these tools, you may find it useful to occasionally refer to this [GitHub glossary](https://docs.github.com/en/get-started/quickstart/github-glossary).

### Acknowledgements

The following workshop materials are based heavily on [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) by Jenny Bryan. The whole book is an excellent read, but here I will highlight the parts that are most useful for our purposes.

Happy Git generally uses command-line actions to work with git and GitHub. You're welcome to use these, but today's workshop will focus on git tools available through the RStudio interface. Just note that you can substitute most commands in the book with clicking buttons in the interface.

This worksheet is an adaptation of an exercise developed by Irena Papst, a senior scientist at the Public Health Agency of Canada, for the Canadian Ecological Forecasting Initiative's Short Course on Forecasting for Decision Making.

# Part 1: Motivation and setup

------------------------------------------------------------------------

### Activity: Why git and GitHub?

Read sections 1-4 of [Jenny Bryan's fabulous article](https://peerj.com/preprints/3159v2/) motivating and demonstrating the use of git and GitHub in contexts beyond traditional software development. While reading, you can add "modelling" and "scientific studies" whenever statistics and data science/analysis are mentioned as the same principles often apply.

After reading, think of a project you've worked on in the past, are currently working on, or one you're planning to work on in the future. Imagine you're trying to convince a peer, colleague, your academic advisor, or your boss that you (and perhaps your team) should use git and GitHub for that project. Describe 1-3 problems that using git or GitHub would solve *specifically for that project*:

1.  Describe a problem that you could address with git HERE
2.  Describe a problem that you could address with git HERE
3.  Describe a problem that you could address with git HERE

------------------------------------------------------------------------

Now that you're motivated to learn how to use git and GitHub, let's go through the process of getting it set up on your machine.

------------------------------------------------------------------------

### Activity: Register for a free GitHub account

Register for a free GitHub account if you don't already have one by going to [this link](https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home). Here is some [useful username advice](https://happygitwithr.com/github-acct.html#username-advice) that you may want to follow.

------------------------------------------------------------------------

### Activity: Install and configure git

Install git using [these instructions](https://happygitwithr.com/install-git.html). You can also double-check if git is already installed on your machine by clicking on the **Terminal** tab of your RStudio console and typing the following command: *git --version* (make sure you have a space between git and the two dashes before version).

Similar to how we interface with R using RStudio, we want to talk to the git software using the GitHub interface. Because our GitHub accounts are tied to specific users, we need to tell git which GitHub account it should be talking to.

Tell git your GitHub username by doing the following in an R session:

```{r, include = FALSE}
## install if needed (do this once):
## install.packages("usethis")

## Load the usethis package
library("usethis")

# Check to see if your git username is already configured in R.
git_sitrep()
# If your "Name" and "Email" are returned as "<unset>", run the next line of code
# with your information. 

# Configure git user information in R. Use your GitHub username and associated email address in the line of code below:
use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")

# Check to make sure the configuration worked.
git_sitrep()
# Your name and email should match the "user.name" and "user.email" provided above.
```

------------------------------------------------------------------------

Having git on your machine is essential, but it can be clunky to deal with directly using the command line. Instead, a git client is more pleasant to work with as it provides a more user-friendly interface to git.

In today's workshop, we will become familiar with the functionality of the git client built into RStudio since the focus of our workshop series is building proficiency in R. However, the RStudio git client is somewhat limited in its features, and so you may want to consider migrating to [a more powerful client](https://happygitwithr.com/git-client.html#recommended-git-clients). I personally love using [GitKraken](https://www.gitkraken.com/).

Following the above instructions to install and configure git should be enough to use the RStudio git client. You may have to restart RStudio and open the RStudio Project associated with your repo to see the Git pane (by default it will be in the top right corner, along with the Environment and History panes). If you're having any issues, you can use [this article](https://support.posit.co/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN) to troubleshoot.

------------------------------------------------------------------------

# Part 2: Creating our first repository

Now that we have git and GitHub set up to work with, let's try making our first repository (or "repo"). You can read more about repos [here](https://happygitwithr.com/git-basics.html#repos-or-repositories), but you can just think of them as a folder containing the files we want to track with version control.

There are many ways to create a version-controlled repository, but since our approach will be centered around using GitHub, we will:

1.  create a central remote repository in the cloud (on GitHub.com), then
2.  create a local copy on our own machine that we work with.

These operations will create a structure like the one in Figure 2 of [the article we started to read earlier](https://peerj.com/preprints/3159v2/). For reference, we will be using the "New project, GitHub first" approach described in [Chapter 15](https://happygitwithr.com/new-github-first.html) of the Happy Git book.

------------------------------------------------------------------------

### Activity: Make a remote GitHub repository

Follow the instructions in just the first part of [section 15.1 of the Happy Git book](https://happygitwithr.com/new-github-first.html#make-a-repo-on-github-2) to make a new repository on GitHub.com (ignore subsections 15.1.1 and 15.1.2). We will only use this repo in this worksheet, so don't worry about naming it anything too profound. We'll refer to it as your "test repo" for the next few activities.

Be sure to select the "Add a README file" option when setting up your repo, which will create a `README.md` file at the top level of your repository, so that we have a file to work with later in this worksheet. In general, I recommend using a `README.Rmd` file for repositories featuring R code, which is created in a different way, so in this case I would leave the "Add a README file" option unchecked.

------------------------------------------------------------------------

### Activity: Make a local copy of your GitHub repository in an RStudio project

RStudio Projects are a great way to keep your work organized and it integrates very nicely with git/GitHub version control workflows. Follow the instructions in [section 15.2.2](https://happygitwithr.com/new-github-first.html#rstudio-ide) to copy (or "clone") your test repo on GitHub.com to a local version on your machine and set up an RStudio Project associated with your repo, all at once!

Git offers two different options we can easily integrate into an RStudio project to access your remote GitHub repository: HTTPS or SSH. HTTPS returns your standard web address URL, while SSH (secure shell) provides additional security when you are accessing a computer using an unsecured network. For today's workshop, we are going to use the HTTPS option, but if you are working with protected data, like information tied to human health or endangered species, it might be worth setting up SSH protocols on your machine.

For all of the following activities, when we're working with the test repo, please work out of the associated Project in an RStudio session.

------------------------------------------------------------------------

# Part 3: Working in a repository locally (alone)

You're now ready to work on your test repo! The idea is that you will make changes to your local copy, "stage" and "commit" those changes locally to the file history tracked by git, and then when you are ready, you can push one or several commits to the remote repository on GitHub.com, so that your collaborators can also see them. Don't really know what any of that means yet? Keep reading!

## Basic git actions

------------------------------------------------------------------------

### Activity: Understanding basic git actions

There are a few fundamental actions you'll perform when working with git locally. These include:

-   **staging** changes to a file (preparing to commit them)

-   **committing** changes to a file

-   looking at the **diffs** (or differences) between the versions of a file (between different commits)

-   **tagging** snapshots of your repository for easy reference of important versions of your repo

Read section 7 of [Jenny's article](https://peerj.com/preprints/3159v2/) to understand these commands. Make any notes you want while learning about these actions here:

-   

------------------------------------------------------------------------

### Activity: Practice basic git actions

Follow along with [sections 15.3-15.8 (ignoring sections 15.6.1-15.6.2)](https://happygitwithr.com/new-github-first.html#make-local-changes-save-commit-1) in your new test repo to practice staging, committing, and pushing changes, making changes directly to the remote repo on GitHub, and pulling changes from the remote to your local version of the repo.

------------------------------------------------------------------------

### Activity: Which files to commit?

Not all files are created equal. Some files may be very important to track for your project, while tracking others may cause unnecessary headaches as you attempt to collaborate with others on your project. Moreover, GitHub blocks files larger than 100 MB, and will give you a warning if you attempt to add or update a file that is larger than 50 MB.[^1] It's good to be mindful of file size when committing to avoid running into this issue.

[^1]: You can get help on dealing with large files in GitHub repositories [here](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github).

Read section 10 of [Jenny's article](https://peerj.com/preprints/3159v2/) to better understand best practices when committing files. Feel free to make notes here:

-   

If you are used to using command line git, you are probably familiar with .gitignore files for excluding any files that you don't want to track with git. In the RStudio client, a .gitignore file is automatically generated for you when you initialize your local repository. Open the .gitignore file. You will see a list of R files related to the background operation of R, but that you typically do not modify as a user during an R session. These files are not being tracked. If there are other files in your RProject (like maybe your raw data) that you would like R to ignore, you can add them to the .gitignore file using the syntax described [here](https://git-scm.com/docs/gitignore). When using the RStudio client, .gitignore files are not as critical because the interactive GUI has check boxes that allow you to specify which files to track.

------------------------------------------------------------------------

# Part 4: Working in a repository in the cloud (with others)

Working alone on your own machine is just one part of the story, but we often want to collaborate with others, or even just set our future selves up for success (when it's been months since you've touched a project and you've inevitably forgotten everything about it). GitHub offers several tools to facilitate project management and collaboration.

## Branches

### Activity: Understanding collaboration with GitHub

Read section 11 of [Jenny's article](https://peerj.com/preprints/3159v2/) and [this GitHub help page on branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches) to better understand how individuals can manage projects and teams can collaborate using GitHub. You can ignore the section about protected branches. Feel free to make a few notes here:

-   

------------------------------------------------------------------------

In the RStudio Git pane, you should see a dropdown icon next to the word "main". This label indicates that you are currently working on the branch called "main". If you enter into the dropdown menu, you will see all of the branches both your locally and on remote. This is where you can switch to a different (local) branch. But we don't have multiple branches... yet!

------------------------------------------------------------------------

### Activity: Practicing collaboration with GitHub via branching

In the RStudio Git pane, click the "New Branch" button. Make up a creative branch name, like "new-branch".

Leave the remote option as "origin"; this just ensures that RStudio knows that the remote repository associated with our local copy is the one labelled "origin", which is what the GitHub copy of the repo is called (given that it is the origin point: the copy of the repo that was created first). Be sure that the "Sync branch with remote" option is selected, to ensure that a copy of our new branch is created for the remote repo as well. Finish by clicking "Create".

Note that RStudio will create this new branch based off of whichever branch you're currently on. In our case, that will be the "main" (and only) branch. If you want to create a new branch from a different one, switch to it before clicking "New Branch".

## Merge conflicts

One of the main pain points of using git to collaborate is running into merge conflicts. According to [the GitHub Docs page on merge conflicts](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/about-merge-conflicts):

> Git can often resolve differences between branches and merge them automatically. Usually, the changes are on different lines, or even in different files, which makes the merge simple for computers to understand. However, sometimes there are competing changes that Git can't resolve without your help. Often, merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file.

Merge conflicts are usually nothing to fear and simply involve manually editing the sections of files where conflicts are identified, to leave just one copy of the conflicted code (the one that is the correct one for the branch you're working on).

Occasionally you may get in too deep with a merge conflict, in which case it may be best to start fresh [by (safely) deleting your local version of a branch/repo and re-cloning it from the origin](https://happygitwithr.com/burn.html).

------------------------------------------------------------------------

### Activity: Creating a merge conflict

Go to your test repo on GitHub.com. Switch to your new branch, open `README.md`, and edit the file. Add a line at the end of the README that says, "Here is a change on remote". Commit it directly to your new branch.

Go to the local copy of your test repo (in your RStudio Project session) and make sure you're on the new branch. Open `README.md` and add, "Here is a local change" on the exact same line as you edited on GitHub.com. Commit the change to the new branch.

Pull any changes on the remote to your local copy of the test repo (as if you're preparing to push your new changes; it's good practice to pull first and synchronize with the remote before pushing, precisely in case you run into a merge conflict). And of course, you should see a merge conflict that looks something like this:

```         
>>> C:/Program Files/Git/bin/git.exe pull

From https://github.com/your-username/test-repo

   5769ff8..7720529  new-branch -> origin/new-branch

Auto-merging README.md

CONFLICT (content): Merge conflict in README.md

Automatic merge failed; fix conflicts and then commit the result.
```

In the RStudio git pop-up pane, you should now see that the README has two different versions of line 8, one from our local repository and one from our remote repository.

Now what???

------------------------------------------------------------------------

### Activity: Resolving a merge conflict

If you open the README file, you'll see the new lines we mentioned above. All you have to do to resolve this merge conflict is erase the code/text you don't want to keep, along with the markup GitHub added (the lines starting with `<<<<<<<`, `=======` and `>>>>>>>`). For instance you could erase all the new lines except

```         
Here is a local change. 
```

or

```         
Here is a change on remote.
```

Once you've made that change, commit it, and push it to the remote. Done! The line with the merge conflict should now show the same text locally and on remote.

Note: it is important that you don't make any other changes to the files when fixing a merge conflict. Just make the fix, commit, and push it, before continuing to work.

## Diffs

When collaborating, it can be useful to view the log of changes on a branch to track progress. You can do this on GitHub.com or in RStudio, by clicking the Diff pane and toggling from "History" to "Changes" in the top left corner. Sometimes it's useful to see changes to a particular file. The latter task is most easily done on GitHub. [This GitHub Docs guide](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/viewing-and-comparing-commits/differences-between-commit-views) describes how to do both of these tasks on GitHub.

## Issues

GitHub also offers several tools meant specifically for managing a project, like [issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues), [milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones), and [projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects). We will focus on **issues** as they are the smallest unit of project management on GitHub; once you master these, and you find the need for a higher level of project management, you may wish to explore milestones and/or projects.

While the term "issues" has a bit of a negative connotation, I prefer to think of these more neutrally as (action) "items". Issues can be action items related to fixing bugs in the code, implementing a new feature, documenting your work, writing a report, etc. The most effective issues/items have an action baked into their title. You can always elaborate further on the topic in the description and discussion thread within the issue, but the issue titles should be short and to-the-point. Issue discussion threads are especially helpful in settings where you're collaborating remotely and/or asynchronously; they can provide a written record of project-related discussions that can be a useful reference over the longer term.

I encourage you to use issues in your own work to keep track of project tasks.

Issues can be assigned to collaborators on a GitHub repository, which helps keep track of who is responsible for a particular task. You can even assign an issue to yourself! Assigning an issue to a repository collaborator (or tagging a GitHub user by typing `@their-username` in the text of GitHub features like issue descriptions, commit messages, etc.) will send them a notification to bring something to their attention. Take a moment now to [check that your GitHub notification settings are configured](https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications) in a way that is functional for you.

## Pull requests

There is one final feature of GitHub that we need to introduce before we can tie them all together into a useful workflow: pull requests. A pull request is a formal request to pull changes from one branch into another, without actually modifying the base branch just yet. This feature enables a more careful approach to modifying code, including getting code reviews from team members before the changes go live in the working version of the code. You can read more about pull requests [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).

## A common workflow

There are many ways to work with GitHub, and its flexibility is one of the reasons it can be difficult to learn: there are just so many options! A common workflow that will help you get started with GitHub is:

1.  Create an issue documenting a task. Maybe have a discussion in the issue thread with your colleagues about how to approach fixing the issue, or document partial progress with comments in the thread. Assign the issue to one or more collaborators to make it clear who is responsible for the task.
2.  Create a new branch from the version of the code where you want to complete this task. The sole purpose of this branch is to address the issue.
3.  Commit changes addressing this issue and push to remote every so often.
4.  Once you're satisfied that you've addressed the issue, push one final time.
5.  Open a pull request. Optionally solicit a code review from a team member. Once this process is complete, merge the pull request into the original branch from which you branched.
6.  Delete the new feature branch.

We will practice the above workflow now.

------------------------------------------------------------------------

### Activity: Make a GitHub Issue and new branch

Follow [these instructions](https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository) to make a new issue on GitHub. Create a new branch of test repo (from the `main` branch) in your local RStudio repository. We will use this branch to "fix" the issue we just created. This could mean fixing a bug, but it could also be for adding a feature or some new text to a manuscript. It is good practice to give branches descriptive names so that you know at a glance what you were working on in that branch.

------------------------------------------------------------------------

Each issue (and pull request) will be assigned a sequential number, so that it can be referenced (and therefore automatically hyperlinked) with a hashtag on GitHub.com, in commit message, and in pull requests. This feature helps when having discussions about a task, but it can also enable some automatic actions on GitHub, which we will see now.

------------------------------------------------------------------------

### Activity: Modify your code and close a GitHub Issue with a pull request

Make a change on your new branch in your local R repository. Imagine this change addresses the issue you created. Commit and push it to the remote.

Follow [these instructions](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request#creating-the-pull-request) to create a pull request on GitHub.com. Summarize and describe your changes in the title and description of the pull request. You can also automatically close the issue this pull request addresses by adding some specific text to your pull request description: follow [these instructions](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword) to close the issue you created with your pull request.

Finally, click the big "Merge pull request" button to pull your changes from the fix branch to the base branch. Figure out how to delete the new feature branch locally and on remote. It's a good practice to delete branches that have served their purpose and been merged into the main branch. (Hint: removing the local version via RStudio's git pane isn't possible... you may need to resort to [command line tools](https://happygitwithr.com/shell.html)! hint: git branch --delete \<branchname\>)

You're done!

# Part 5: Collaborating with Other GitHub Users

------------------------------------------------------------------------

### Optional Activity: Practice working in a shared repository

Now that we've familiarized ourselves with the basic tools of git and GitHub on our own computers, we are ready to try collaborating with others. If you want to try to challenge yourself, find a partner or a small group and try to run through the workflow below:

1.  Have one person in your group create a remote repository to house your project on GitHub.com. Make sure to add README.md file like we did above. When you initialize a repository on your GitHub, other people will not automatically be able to push to your repository unless they are added as [collaborators](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-access-to-your-personal-repositories/inviting-collaborators-to-a-personal-repository). Add your group members to the repository using the hyper-linked instructions.

    *For more advanced git users, you are also welcome to skip the collaborator step and have each group member [fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) the repository. Forking essentially creates a copy of your group leader's repository on your GitHub account. You will edit the forked copy and have to submit a pull request to the group leader to incorporate any changes into the original version of the repository.*

2.  Each member of the group should clone a copy of the repository locally to their own machine. (If you need a hint, see Part 2 above where we created a local repository.)

    *If you are working with a forked repository, use the URL for the forked version to make your local copy.*

3.  Have one group member add their name to the README.md file. Stage, commit, and push the edited README.md file to GitHub.

    *If you are working with a forked repository, you will have to submit a [pull](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) request to the group leader who is in charge of the source repository.*

4.  One by one, each group member should pull from GitHub to their local repository, add their name to the README.md file, stage, commit, and push to GitHub until all group members' names have been incorporated into the README.md file.

    *If you are working with forked repositories, it is a good idea to set them to automatically sync with any upstream updates. If your fork is set up to automatically sync, other users changes will have been already incorporated into your document. Add your own name using the workflow outlined above in step four. Then submit a pull request as outlined in step three.*

5.  You've just collaborated using git and GitHub! Feel free to try out some more advanced git practices like using branches, creating and resolving merge conflicts, or assigning issues with your group if you have time.
